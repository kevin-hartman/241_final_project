response_levels = c("None at all", "A little", "A moderate amount", "A lot", "A great deal")
ubi_group_levels = c("Promoter", "Passive", "Detractor")
ubi_familiarity_levels = c("Extremely familiar", "Very familiar", "Moderately familiar", "Slightly familiar", "Not familiar at all")
recruit_wave_levels = c("Wave1", "Wave2", "Wave3", "Wave4", "Wave5")
results_full = results_full_dedup  %>%
# Define arms and nodes
mutate(arm = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ "Purity_Base"
, grepl('a', fc_c_1, ignore.case = TRUE) ~ "Purity_Extension"
, grepl('a', fc_d_1, ignore.case = TRUE) ~ "Fairness_Base"
, grepl('a', fc_e_1, ignore.case = TRUE) ~ "Fairness_Extension"
, TRUE ~ "Control") %>% factor(levels = arm_levels)
, node = paste0(arm, "_panel_", panel)
, arm_level = case_when(grepl('Base', arm) ~ 'Base'
, grepl('Extension', arm) ~ 'Extension'
, TRUE ~ 'Control') %>% factor(levels = c("Control", "Base", "Extension"))
, arm_story = case_when(grepl('Purity', arm) ~ 'Purity'
, grepl('Fairness', arm) ~ 'Fairness'
, TRUE ~ 'Control') %>% factor(levels = c("Control", "Purity", "Fairness"))
# Combine reaction vars from different arms
, purity_q1_self = case_when(grepl('a', fc_b_1, ignore.case = TRUE) ~ fc_b_1
, grepl('a', fc_c_1, ignore.case = TRUE) ~ fc_c_1
, TRUE ~ NA_character_)
, purity_q2_repulsed = case_when(grepl('a', fc_b_2, ignore.case = TRUE) ~ fc_b_2
, grepl('a', fc_c_2, ignore.case = TRUE) ~ fc_c_2
, TRUE ~ NA_character_)
, purity_q3_injustice = case_when(grepl('a', fc_b_3, ignore.case = TRUE) ~ fc_b_3
, grepl('a', fc_c_3, ignore.case = TRUE) ~ fc_c_3
, TRUE ~ NA_character_)
, purity_q4_relieved = case_when(grepl('a', fc_c_4, ignore.case = TRUE) ~ fc_c_4
, TRUE ~ NA_character_)
, fairness_q1_self = case_when(grepl('a', fc_d_1, ignore.case = TRUE) ~ fc_d_1
, grepl('a', fc_e_1, ignore.case = TRUE) ~ fc_e_1
, TRUE ~ NA_character_)
, fairness_q2_pain = case_when(grepl('a', fc_d_2, ignore.case = TRUE) ~ fc_d_2
, grepl('a', fc_e_2, ignore.case = TRUE) ~ fc_e_2
, TRUE ~ NA_character_)
, fairness_q3_injustice = case_when(grepl('a', fc_d_3, ignore.case = TRUE) ~ fc_d_3
, grepl('a', fc_e_3, ignore.case = TRUE) ~ fc_e_3
, TRUE ~ NA_character_)
, fairness_q4_relieved = case_when(grepl('a', fc_e_4, ignore.case = TRUE) ~ fc_e_4
, TRUE ~ NA_character_)
# Bin reaction vars
, purity_q2_repulsed_bin = case_when(is.na(purity_q2_repulsed) ~ NA_real_
, purity_q2_repulsed %in% c("None at all", "A little") ~ 0
, purity_q2_repulsed %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, purity_q4_relieved_bin = case_when(is.na(purity_q4_relieved) ~ NA_real_
, purity_q4_relieved %in% c("None at all", "A little") ~ 0
, purity_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q2_pain_bin = case_when(is.na(fairness_q2_pain) ~ NA_real_
, fairness_q2_pain %in% c("None at all", "A little") ~ 0
, fairness_q2_pain %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, fairness_q4_relieved_bin = case_when(is.na(fairness_q4_relieved) ~ NA_real_
, fairness_q4_relieved %in% c("None at all", "A little") ~ 0
, fairness_q4_relieved %in% c("A moderate amount", "A great deal", "A lot") ~ 1
, TRUE ~ NA_real_) %>% factor()
, open_text_reaction = q3_fc2
# Factor variables
, ideology = factor(polispect, levels = ideology_levels)
, ideology_bin = case_when(is.na(ideology) ~ "missing"
, ideology == "Very Liberal" ~ "Liberal"
, ideology == "Lean Liberal" ~ "Liberal"
, ideology == "Liberal" ~ "Liberal"
, ideology == "Very Conservative" ~ "Conservative"
, ideology == "Lean Conservative" ~ "Conservative"
, ideology == "Conservative" ~ "Conservative"
, TRUE ~ "Moderate")
# UBI/Outcome
, ubi_group = factor(ubi_2_nps_group, levels = ubi_group_levels)
, ubi_familiarity = factor(ubi_f, levels = ubi_familiarity_levels)
, ubi_familiarity_bin = case_when(is.na(ubi_f) ~ NA_real_
, ubi_f == "Not familiar at all" ~ 0
, TRUE ~ 1) %>% factor()
, ubi_number = as.numeric(ubi_2)
# Recruitment Day blocks
, recruitment_wave = case_when(is.na(recruitday) ~ "missing"
, recruitday == "T1" ~ "Wave1"
, recruitday == "F" ~ "Wave2"
, recruitday == "SU" ~ "Wave3"
, recruitday == "M" ~ "Wave4"
, recruitday == "T2" ~ "Wave5"
, TRUE ~ "unknown") %>% factor(levels = recruit_wave_levels)
)
# Clean = limit to the variables we need
results_clean = results_full %>%
select(prolific_pid, panel, arm, node, arm_level, arm_story
, ideology, ideology_bin, age, gender, urban, employment_status, student_status
, purity_q1_self, purity_q2_repulsed, purity_q3_injustice, purity_q4_relieved
, fairness_q1_self, fairness_q2_pain, fairness_q3_injustice, fairness_q4_relieved
, purity_q2_repulsed_bin, purity_q4_relieved_bin, fairness_q2_pain_bin, fairness_q4_relieved_bin
, open_text_reaction
, ubi_number, ubi_group, ubi_familiarity, ubi_familiarity_bin, recruitday, recruitment_wave)
# Arm-specific datasets
results_armlibfair = results_clean %>% filter(ideology_bin == 'Liberal' & grepl('Fairness|Control', arm))
results_armlibpure = results_clean %>% filter(ideology_bin == 'Liberal' & grepl('Purity|Control', arm))
results_armconfair = results_clean %>% filter(ideology_bin == 'Conservative' & grepl('Fairness|Control', arm))
results_armconpure = results_clean %>% filter(ideology_bin == 'Conservative' & grepl('Purity|Control', arm))
# Remove moderates for EDA
results_clean_lim = results_clean %>% filter(ideology_bin != "Moderate")
# Controls only for recruitment day test
results_clean_lim_ctrl = results_clean %>% filter(ideology_bin != "Moderate" & grepl('Control', arm))
custom_lm_calcs = function(lm_in, clusters_in){
# Robust
vcov_robust = vcovHC(lm_in)
se_robust = sqrt(diag(vcov_robust))
# Cluster
if(length(clusters_in) > 1){
vcov_cluster = cluster.vcov(lm_in, clusters_in)
se_cluster = sqrt(diag(vcov_cluster))
} else {
vcov_cluster = NA
se_cluster = NA
}
# Output
lm_out = list(lm = lm_in
, vcov_robust = vcov_robust
, se_robust = se_robust
, vcov_cluster = vcov_cluster
, se_cluster = se_cluster
)
return(lm_out)
}
# Ideology
plot_ideology = ggplot() +
geom_bar(data = results_clean_lim %>%  group_by(ideology) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology)
, aes(x = Ideology, y = Count, fill = Ideology), stat = "identity") +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
theme(legend.position = "left", axis.text.x=element_blank(), legend.text=element_text(size = 8))
# Backbone ggplot object
grpstackbar_plot = ggplot() +
facet_grid( ~ ideology_bin) +
scale_fill_brewer(type = "div", palette = 5, direction = -1, aesthetics = "fill") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Age
plot_age = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(age, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Age" = age)
, aes(x = Age, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Gender
plot_gender = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(gender, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Gender" = gender)
, aes(x = Gender, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Urban
plot_urban = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% group_by(urban, ideology, ideology_bin) %>%
summarise(Count = n()) %>% rename("Ideology" = ideology, "Urban" = urban)
, aes(x = Urban, y = Count, fill = Ideology), stat = "identity", show.legend = FALSE)
# Histogram of familiarity
plot_familiarity = grpstackbar_plot +
geom_bar(data = results_clean_lim %>% filter(!is.na(ubi_familiarity)) %>%
group_by(ubi_familiarity, ideology, ideology_bin) %>%
summarise(Count = n()) %>%
rename("Ideology" = ideology, "UBI Familiarity" = ubi_familiarity)
, aes(x = `UBI Familiarity`, y = Count, fill = Ideology), stat="identity", show.legend = FALSE)
# PLOT
grid.arrange(plot_ideology, plot_gender
, plot_age, plot_familiarity
, nrow = 2)
results_response = results_clean_lim %>%
mutate("See myself" = case_when(arm_story == "Purity" ~ purity_q1_self, TRUE ~ fairness_q1_self)
, "Felt repulsed/pain" = case_when(arm_story == "Purity" ~ purity_q2_repulsed, TRUE ~ fairness_q2_pain)
, "Felt relieved" = case_when(arm_story == "Purity" ~ purity_q4_relieved, TRUE ~ fairness_q4_relieved)) %>%
select(ideology_bin, arm_level, arm_story, `See myself`, `Felt repulsed/pain`, `Felt relieved`) %>%
gather(prompt, value, -ideology_bin, -arm_level, -arm_story) %>%
filter(!is.na(value)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt, value) %>%
summarise(count = n()) %>%
mutate(Response = factor(value, levels = response_levels)) %>%
group_by(ideology_bin, arm_level, arm_story, prompt) %>%
mutate(count_total_cohort = sum(count)
, Share = count/count_total_cohort
, Prompt = factor(prompt, levels = c("See myself", "Felt repulsed/pain", "Felt relieved")))
ggplot(data = results_response
, aes(x = Prompt, y = Response, fill = Share)) +
geom_tile() +
facet_grid(rows = vars(arm_story, arm_level)
, cols = vars(ideology_bin)) +
scale_fill_distiller(direction = 1, palette = 2) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)
, legend.position = "none")
model_libfair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair), clusters_in = NA)
model_libpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure), clusters_in = NA)
model_confair = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair), clusters_in = NA)
model_conpure = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure), clusters_in = NA)
stargazer(model_libfair$lm, model_libpure$lm
, model_confair$lm, model_conpure$lm
, se = list(model_libfair$se_robust, model_libpure$se_robust
, model_confair$se_robust, model_conpure$se_robust)
, report           = ('v*c*sp')
, header           = F
, title            = "By Arm"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, column.labels    = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment")
, notes            = c("HC Robust Standard Errors"
, "Lib = Liberal | Con = Conservative"
, "Pure = Purity Frame | Fair = Fairness Frame")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:allarmsmodel"
, type             = stargazer_type
)
# Gender
model_conpure_gender = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + gender
, data = results_armconpure)
, clusters_in = NA)
# Familiarity
model_conpure_familiarity = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + ubi_familiarity_bin
, data = results_armconpure)
, clusters_in = NA)
# Reaction (need to re-factor reactions first)
results_armconpure_reaction = results_armconpure %>%
mutate(purity_q2_repulsed_bin_f = case_when(is.na(purity_q2_repulsed_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q2_repulsed_bin))) %>% factor()
, purity_q4_relieved_bin_f = case_when(is.na(purity_q4_relieved_bin) ~ 0
, TRUE ~ as.numeric(as.character(purity_q4_relieved_bin))) %>% factor()
)
model_conpure_reaction = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + purity_q2_repulsed_bin_f * purity_q4_relieved_bin_f
, data = results_armconpure_reaction)
, clusters_in = NA)
stargazer(model_conpure$lm
, model_conpure_gender$lm
, model_conpure_familiarity$lm
, model_conpure_reaction$lm
, se = list(model_conpure$se_robust
, model_conpure_gender$se_robust
, model_conpure_familiarity$se_robust
, model_conpure_reaction$se_robust
)
, report           = ('v*c*sp')
, header           = F
, title            = "Conservative + Purity Treatment Arm Interaction Specifications"
, dep.var.caption  = "Con + Pure Arm Only"
, dep.var.labels   = "UBI Ranking"
, column.labels    = c("No Covariates", "Gender", "UBI Familiarity", "Reaction")
, covariate.labels = c("Base Only Treatment", "Base + Extension Treatment"
, "Male", "Familiar w/ UBI"
, "Repulsed", "Relieved", "Repulsed then Relieved")
, notes            = c("HC Robust Standard Errors"
, "Lib = Liberal | Con = Conservative"
, "Pure = Purity Frame | Fair = Fairness Frame")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covariatesmodel"
, type             = stargazer_type
)
flowchart_img = readPNG("images/flowchart.png")
grid.raster(flowchart_img)
# EXAMPLE of how to include images - rest of the images to be added with text
knitr::include_graphics("images/vignette_purity_base1.png")
knitr::include_graphics("images/vignette_purity_base2.png")
arm_pur_base = custom_lm_calcs(lm_in = lm(arm=="Purity_Base" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_pur_ext = custom_lm_calcs(lm_in = lm(arm=="Purity_Extension" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_fair_base = custom_lm_calcs(lm_in = lm(arm=="Fairness_Base" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_fair_ext = custom_lm_calcs(lm_in = lm(arm=="Fairness_Extension" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
arm_control = custom_lm_calcs(lm_in = lm(arm=="Control" ~ age + gender + urban, data = results_clean_lim %>%
filter(recruitment_wave %in% c("Wave1"), ideology_bin %in%("Conservative")))#, "Wave2")))
, clusters_in = NA)
stargazer(arm_pur_base$lm, arm_pur_ext$lm, arm_fair_base$lm, arm_fair_ext$lm, arm_control$lm
, se = list(arm_pur_base$se_robust, arm_pur_ext$se_robust, arm_fair_base$se_robust, arm_fair_ext$se_robust, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = F
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = "text" #stargazer_type
)
prelim_model_libfair_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibfair %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_libpure_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armlibpure %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_confair_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconfair %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
prelim_model_conpure_prelim = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level, data = results_armconpure %>%
filter(recruitment_wave %in% c("Wave1", "Wave2")))
, clusters_in = NA)
stargazer(prelim_model_libfair_prelim$lm, prelim_model_libpure_prelim$lm
, prelim_model_confair_prelim$lm, prelim_model_conpure_prelim$lm
, type = stargazer_type, header = F
, se = list(prelim_model_libfair_prelim$se_robust, prelim_model_libpure_prelim$se_robust
, prelim_model_confair_prelim$se_robust, prelim_model_conpure_prelim$se_robust)
, title = "Preliminary Model - By Arm (Waves 1-2 only)"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Treatment", "Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:prelimmodel"
)
model_control_day = custom_lm_calcs(lm_in = lm(ubi_number ~ ideology_bin + recruitment_wave, data = results_clean_lim_ctrl), clusters_in = NA)
model_libfair_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armlibfair), clusters_in = NA)
model_libpure_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armlibpure), clusters_in = NA)
model_confair_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armconfair), clusters_in = NA)
model_conpure_day = custom_lm_calcs(lm_in = lm(ubi_number ~ arm_level + recruitment_wave, data = results_armconpure), clusters_in = NA)
stargazer(model_control_day$lm
, model_libfair_day$lm, model_libpure_day$lm
, model_confair_day$lm, model_conpure_day$lm
, type = stargazer_type, header = F
, se = list(model_control_day$se_robust
, model_libfair_day$se_robust, model_libpure_day$se_robust
, model_confair_day$se_robust, model_conpure_day$se_robust
)
, title            = "By Arm, Recruitment Day Covariates"
, column.labels    = c("Control Only"
, "Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, order = c(1,4,5,2,3,6,7)
, covariate.labels = c("Liberal", "Base Treatment", "Extension Treatment"
,"Wave 2", "Wave 3", "Wave 4", "Wave 5")
, dep.var.caption  = "Four Study Arms + Control"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
, report           = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:wavestratmodel"
)
stargazer(arm_pur_base$lm
, arm_pur_ext$lm, arm_fair_base$lm, arm_fair_ext$lm, arm_control$lm
, se = list(arm_pur_base$se_robust, arm_pur_ext$se_robust, arm_fair_base$se_robust, arm_fair_ext$se_robust, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = F
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = "text" #stargazer_type
)
stargazer(arm_pur_base$lm
, arm_pur_ext$lm
, arm_fair_base$lm
, arm_fair_ext$lm
, arm_control$lm
, se = list(arm_pur_base$se_robust
, arm_pur_ext$se_robust
, arm_fair_base$se_robust
, arm_fair_ext$se_robust
, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = F
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = "text" #stargazer_type
, single.row       = TRUE
)
stargazer(arm_pur_base$lm
, arm_pur_ext$lm
, arm_fair_base$lm
, arm_fair_ext$lm
, arm_control$lm
, se = list(arm_pur_base$se_robust
, arm_pur_ext$se_robust
, arm_fair_base$se_robust
, arm_fair_ext$se_robust
, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = F
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = c("UBI Ranking")
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = "text" #stargazer_type
, single.row       = TRUE
)
stargazer(arm_pur_base$lm
, arm_pur_ext$lm
, arm_fair_base$lm
, arm_fair_ext$lm
, arm_control$lm
, se = list(arm_pur_base$se_robust
, arm_pur_ext$se_robust
, arm_fair_base$se_robust
, arm_fair_ext$se_robust
, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = FALSE
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = c("UBI Ranking")
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = stargazer_type
, single.row       = TRUE
)
stargazer_type = "text" #"latex" # change to latex when ready to knit
stargazer(prelim_model_libfair_prelim$lm, prelim_model_libpure_prelim$lm
, prelim_model_confair_prelim$lm, prelim_model_conpure_prelim$lm
, type = stargazer_type, header = F
, se = list(prelim_model_libfair_prelim$se_robust, prelim_model_libpure_prelim$se_robust
, prelim_model_confair_prelim$se_robust, prelim_model_conpure_prelim$se_robust)
, title = "Preliminary Model - By Arm (Waves 1-2 only)"
, column.labels = c("Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, covariate.labels = c("Base Treatment", "Extension Treatment")
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = "UBI Ranking"
, notes = "HC Robust Standard Errors"
, report = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:prelimmodel"
)
stargazer(model_control_day$lm
, model_libfair_day$lm, model_libpure_day$lm
, model_confair_day$lm, model_conpure_day$lm
, type = stargazer_type, header = F
, se = list(model_control_day$se_robust
, model_libfair_day$se_robust, model_libpure_day$se_robust
, model_confair_day$se_robust, model_conpure_day$se_robust
)
, title            = "By Arm, Recruitment Day Covariates"
, column.labels    = c("Control Only"
, "Lib + Fair", "Lib + Pure"
, "Con + Fair", "Con + Pure")
, order = c(1,4,5,2,3,6,7)
, covariate.labels = c("Liberal", "Base Treatment", "Extension Treatment"
,"Wave 2", "Wave 3", "Wave 4", "Wave 5")
, dep.var.caption  = "Four Study Arms + Control"
, dep.var.labels   = "UBI Ranking"
, notes            = "HC Robust Standard Errors"
, report           = ('v*c*sp')
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:wavestratmodel"
)
stargazer(arm_pur_base$lm
, arm_pur_ext$lm
, arm_fair_base$lm
, arm_fair_ext$lm
, arm_control$lm
, se = list(arm_pur_base$se_robust
, arm_pur_ext$se_robust
, arm_fair_base$se_robust
, arm_fair_ext$se_robust
, arm_control$se_robust)
# , report           = ('v*c*sp')
, header           = FALSE
, title            = "Preliminary Model - Covarience Check by Arm (Waves 1-2 only)"
, dep.var.caption  = "Four Study Arms"
, dep.var.labels   = c("UBI Ranking")
, column.labels    = c("Pure Base", "Pure Ext", "Fair Base", "Fair Ext", "Control")
, notes            = c("HC Robust Standard Errors"
, "Pure = Purity Frame | Fair = Fairness Frame"
, "Base = Base Only | Ext = Base + Extension")
, font.size        = "small"
, column.sep.width = "1pt"
, label            = "tab:covbalancecheck"
, type             = stargazer_type
, single.row       = TRUE
)
install.packages(c('rmarkdown', 'tinytex'))
install.packages(c("rmarkdown", "tinytex"))
install.packages(c("rmarkdown", "tinytex"))
sessionInfo()
tinytex::install_tinytex()
